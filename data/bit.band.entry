NAME int bit.band (int... input)
DESCRIPTION Performs bitwise AND (input&amp;input) over all arguments.
LINK #bit.band
DETAILS
If you have two bit strings (integers really, but bit strings tells us more 
about what these integers are used for), you actually have a bunch of bits that 
you can use to store values in. The and function is useful for filtering a 
single value out of a context bit string, and for checking if a bit is set. 

For example, in a given `pmap` entry there reside *two* values instead of one: 
the rightmost byte stores the type and the other three bytes store the index of 
the particle. We can then use AND and bit shifting to separate the type and 
the particle index. The below operation shows how a pmap entry (line 1) and a 
*bit mask* (line 2) are used to get a value containing only the type.

      00000000 00000000 00010111 11101110
    & 00000000 00000000 00000000 11111111
    = 00000000 00000000 00000000 11101110
